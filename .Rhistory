[[genesets]]
class(x)
str(x)
x$genesets
x$geneset.names
length(x$genesets)
x$geneset.descriptions
x$genesets[1]
GO.db
library(GO.db)
transform
?transform
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?axis
lines
?lines
?llines
?splom
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("MASS")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
?lines
?llines
qplot(votes, rating, data = movies) + geom_smooth()
source("http://bioconductor.org/biocLite.R")
biocLite("neaGUI")
?nea
neaGUI()
library(neaGUI)
?nea
setwd("D:/interest/coursera/Reproducible research")
url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
downl
?download
?download.file
download.file(url = url)
download.file(url = url, "assignment1.zip")
?unzip
unzip("assignment1.zip")
dir <- "D:/interest/coursera/Reproducible research"
setwd(dir)
url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = url, "assignment1.zip")
unzip("assignment1.zip")
list.file(dir)
list.files(dir)
class(list.files(dir))
read.csv("activity.csv")
data <- read.csv("activity.csv")
str(data)
summary(data)
library(lubridate)
str(data.)
str(data)
data$date <- ymd(as.character(data$date))
str(data)
?download.files
?download.file
library(RCurl)
getURL
?getURL
getURL("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
data <- complete.cases(data)
library(plyr)
summary(data)
#### set my directory, url ect to download the data
```{r}
dir <- "D:/interest/coursera/Reproducible research"
setwd(dir)
file.url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
```
#### download the data and unzip
- just ignor the error in the chunk, for some reason url in the code is not compatible to Rmd
```{r}
download.file(url = file.url, "assignment1.zip")
unzip("assignment1.zip")
```
#### read library for later analysis
```{r}
library(lubridate)
library(plyr)
```
#### pre-process
- read the data
- transform the format
- delete the observation with NA
```{r fig.width=7, fig.height=6}
data <- read.csv("activity.csv")
data$date <- ymd(as.character(data$date))
data <- data[complete.cases(data)]
```
#### plot 1
```{r}
```
dir <- "D:/interest/coursera/Reproducible research"
setwd(dir)
file.url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = file.url, "assignment1.zip")
unzip("assignment1.zip")
library(lubridate)
library(plyr)
data <- read.csv("activity.csv")
data$date <- ymd(as.character(data$date))
data <- data[complete.cases(data)]
data <- data[complete.cases(data),]
#### set my directory, url ect to download the data
```{r}
dir <- "D:/interest/coursera/Reproducible research"
setwd(dir)
file.url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
```
#### download the data and unzip
- just ignor the error in the chunk, for some reason url in the code is not compatible to Rmd
```{r}
download.file(url = file.url, "assignment1.zip")
unzip("assignment1.zip")
```
#### read library for later analysis
```{r}
library(lubridate)
library(plyr)
```
#### pre-process
- read the data
- transform the format
- delete the observation with NA
```{r fig.width=7, fig.height=6}
data <- read.csv("activity.csv")
data$date <- ymd(as.character(data$date))
data <- data[complete.cases(data),]
```
#### plot 1
```{r}
```
str(data)
data$date
table(data$date)
data.per.day <- ddply(data, (date), summarise,
total.step = sum(step))
str(data)
data.per.day <- ddply(data, (date), summarise,
total.step = sum(step))
data.per.day <- ddply(data, .date, summarise,
total.step = sum(step))
?ddply
data.per.day <- ddply(data, .(as.factor(date)), summarise,
total.step = sum(step))
data.per.day <- ddply(data, .(as.factor(date)), summarise,
total.step = sum(step))
ddply
head(dat)
head(data)
data.per.day <- ddply(data, .(date), summarise,
total.step = sum(steps))
hist()
head(ata.per.day)
head(data.per.day)
hist(data.per.day$total.step)
hist(data.per.day$total.step, breaks = 5)
hist(data.per.day$total.step, breaks = 7)
hist(data.per.day$total.step)
data.per.day
?hist
hist(data.per.day$total.step, breaks = 10)
hist(data.per.day$total.step, breaks = 8)
hist(data.per.day$total.step, breaks = 6)
hist(data.per.day$total.step, breaks = 8)
hist(data.per.day$total.step)
data.per.day <- ddply(data, .(date), summarise,
total.step = sum(steps),
mean.step = mean(steps),
median.step = median(steps))
head(data.per.day)
median
data.per.day$median.step
is.na(data.per.day)
is.na(data)
table(is.na(data))
install.packages("xtable")
?xtable
library(xtable)
?xtable
## Load example dataset
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:20, ])
digits(tli.table)[c(2, 6)] <- 0
print(tli.table)
print(tli.table, type = "html")
data.per.day[1, 2]
data.per.day[1,]
data.per.day[,1]
data.per.day[, c(1, 2)]
t(data.per.day[, c(1, 2)])
data.per.day[, c(1, 3, 4)]
head(data, 100)
data <- read.csv("activity.csv")
head(dat)
head(data)
with(data.interval, plot(mean.step, interval))
data.interval <- ddply(data, .(date, interval), summarise,
)
data.interval <- ddply(data, .(date, interval), summarise,
mean.step = mean(steps))
with(data.interval, plot(mean.step, interval))
with(data.interval, plot(interval, mean.step, type = "l"))
head(data.interval)
table(data$date, data$interval)
head(data.interval)
head(data)
head(data, 100)
head(data, 10)
####  time series plot
#### set my directory, url ect to download the data
```{r}
dir <- "D:/interest/coursera/Reproducible research"
setwd(dir)
file.url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
```
#### download the data and unzip
- just ignor the error in the chunk, for some reason url in the code is not compatible to Rmd
```{r,}
download.file(url = file.url, "assignment1.zip")
unzip("assignment1.zip")
```
#### read library for later analysis
```{r,  message=FALSE, warning=FALSE}
library(lubridate)
library(plyr)
```
#### pre-process
- read the data
- transform the format
- delete the observation with NA
```{r}
data <- read.csv("activity.csv")
data$date <- ymd(as.character(data$date))
data <- data[complete.cases(data),]
```
#### a histogram of the total number of steps taken each day
```{r}
data.per.day <- ddply(data, .(date), summarise,
total.step = sum(steps),
mean.step = mean(steps),
median.step = median(steps))
hist(data.per.day$total.step)
```
#### mean and median total number of steps taken per day
```{r, results='hold'}
data.per.day[, c(1, 3, 4)]
```
####  time series plot
```{r}
data.interval <- ddply(data, .(date, interval), summarise,
mean.step = mean(steps))
with(data.interval, plot(interval, mean.step, type = "l"))
```
head(data)
head(data.interval)
head(data.interval, 100)
head(data.interval, 1000)
with(data.interval, plot(interval, mean.step, type = "l"))
dim(data.interval)
dim(data)
data.interval <- ddply(data, .(interval), summarise,
mean.step = mean(steps))
with(data.interval, plot(interval, mean.step, type = "l"))
which.max(data.interval$step)
which.max(data.interval$mean.step)
data.interval[which.max(data.interval$mean.step),]
data.full <- read.csv("activity.csv")
is.na(data.full$steps)
table(is.na(data.full$steps))
table(is.na(data.full$steps))[TRUE]
table(is.na(data.full$steps))["TRUE"]
ture.number
#### there are 'r true.number'
true.number <- table(is.na(data.full$steps))["TRUE"]
true.number
number <- table(is.na(data.full$steps))["TRUE"]
rm(true.number)
number
number
class(number)
data.full[is.na(data.full)]
is.na(data.full)]
is.na(data.full)]
is.na(data.full)
complete.cases(data.full)
data.full[!complete.cases(data.full)]
data.full[!complete.cases(data.full),]
na.idx <- !complete.cases(data.full)
na.idx
head(data.full)
data.full[steps == NA, ]
which.na
na.idx <- which(data.full$steps == NA)
na.idx
which(data.full$steps == NA)
na.idx <- which(data.full$steps = NA)
data.full$steps
data.full$steps = NA
data.full <- read.csv("activity.csv")
number <- table(is.na(data.full$steps))["TRUE"]
print(as.numeric(number))
?which
which(data.full$steps = NA)
which(data.full$steps == NA)
which(is.na(data.full$steps))
na.idx <- which(is.na(data.full$steps))
data.per.day
data.full[idx]
data.full[idx, ]
data.full[na.idx, ]
data.full[na.idx, ]$step
match
?match
head(data.per.day)
match(data.full$date)
match(data.full$date, data.per.day$date)
data.full$date <- ymd(data.full$date)
match(data.full$date, data.per.day$date)
data.per.day[match(data.full$date, data.per.day$date)]
data.per.day[match(data.full$date, data.per.day$date), 2]
head(data.per.day)
data.per.day[match(data.full$date, data.per.day$date), "median.step"]
data.per.day[match(data.full$date, data.per.day$date), "mean.step"]
data.per.day[match(data.per.day$date, data.full$date, ), "mean.step"]
data.per.day[match(data.per.day$date, data.full$date), "mean.step"]
match(data.full$date, data.per.day$date)
match(data.per.day$date, data.full$date)
match(data.full$date, data.per.day$date)
data.full[match(data.full$date, data.per.day$date), "mean.step"]
data.per.day[match(data.full$date, data.per.day$date), "mean.step"]
data.per.day <- ddply(data, .(date), summarise,
total.step = sum(steps),
mean.step = mean(steps),
median.step = median(steps))
hist(data.per.day$total.step)
head(data.per.day )
hist(data$full, steps)
hist(data$full$steps)
head(data.full)
head(data.full$steps)
hist(data.full$steps)
data.per.day[match(data.full$date, data.per.day$date), "mean.step"]
data.full$steps
data.full$steps[na.idx]
data.per.day[match(data.full[na.idx]$date, data.per.day$date), "mean.step"]
data.per.day[match(data.full[na.idx,]$date, data.per.day$date), "mean.step"]
match(data.full[na.idx,]$date, data.per.day$date)
match(data.full[na.idx,]$date, data.per.day$date)
match(data.full[na.idx,]
)
data.full[na.idx,]$date
data.per.day$date
match(data.full[na.idx,]$date, data.per.day$date)
match(data.per.day$date, data.full[na.idx,]$date)
?match
match(data.full$date, data.per.day$date)
match(data.full[1]$date, data.per.day$date)
data.full[1]$date
data.full[1]
data.full[1, ]
data.full[1, ]$date
data.full[na.idx,]$date
match(data.full[na.idx,]$date, data.per.day$date)
data.full[100,]$date
data.full[1:100,]$date
match(data.full[1,]$date, data.per.day$date)
match(data.full[100,]$date, data.per.day$date)
match(data.full[1000,]$date, data.per.day$date)
data.full[1000,]
na.idx <- which(is.na(data.full$steps))
data.full$date <- ymd(data.full$date)
data.full$steps[na.idx]
data.full[na.idx]$steps
data.full[na.idx, ]$steps
data.full[na.idx, ]$dates
data.full[na.idx, ]$date
match(data.full[na.idx, ]$date, data.per.day$date)
ata.full[na.idx, ]$date
data.full[na.idx, ]$date
data.per.day$date
a <- data.per.day$date
b <- data.full[na.idx, ]$date
class(a)
class(b)
match(a,b)
match(as.character(a),as.character(b))
a
b
b[1:100, ]
b[1:100]
a
data.per.day
head(data.interval)
data.per.day[match(data.full[na.idx, ]$interval, data.per.day$interval), "mean.step"]
data.full[na.idx, ]$interval
data.full[na.idx, ]$interval, data.interval$interval)
data.full[na.idx, ]$interval
data.interval$interval
match(data.full[na.idx, ]$interval, data.interval$interval)
head(data.interval)
data.per.day[match(data.full[na.idx, ]$interval, data.interval$interval), "mean.step"]
head(data.interval)
data.interval[match(data.full[na.idx, ]$interval, data.interval$interval), "mean.step"]
data.full[na.idx, ]$interval <-
data.interval[match(data.full[na.idx, ]$interval, data.interval$interval), "mean.step"]
is.na(data.full)
talbe(is.na(data.full))
table(is.na(data.full))
data.full[na.idx, ]$interval
table(is.na(data.full))
data.full[na.idx, ]$interval
head(data.full)
na.idx <- which(is.na(data.full$steps))
data.full$date <- ymd(data.full$date)
data.full[na.idx, ]$steps <-
data.interval[match(data.full[na.idx, ]$interval, data.interval$interval), "mean.step"]
head(data.full)
data.full[na.idx, ]$steps
head(data.interval, 100)
library(lubridate)
library(plyr)
data <- read.csv("activity.csv")
data$date <- ymd(as.character(data$date))
data.per.day <- ddply(data, .(date), summarise,
total.step = sum(steps, na.rm = T),
mean.step = mean(steps, na.rm = T),
median.step = median(steps, na.rm = T))
hist(data.per.day$total.step)
head(data.per.day)
data.per.day[, c(1, 3, 4)]
data.interval <- ddply(data, .(interval), summarise,
mean.step = mean(steps, na.rm = T))
with(data.interval, plot(interval, mean.step, type = "l"))
data.interval[which.max(data.interval$mean.step),]
ddply(data.interval, .(date), function(x){
x[which.max(x$mean.step), ]
})
ddply(data.interval, .(as.character(date)), function(x){
x[which.max(x$mean.step), ]
})
head(data.interval)
data.interval[which.max(data.interval$mean.step),]
data.full <- read.csv("activity.csv")
number <- table(is.na(data.full$steps))["TRUE"]
print(as.numeric(number))
na.idx <- which(is.na(data.full$steps))
data.full$date <- ymd(data.full$date)
data.full[na.idx, ]$steps <-
data.interval[match(data.full[na.idx, ]$interval, data.interval$interval), "mean.step"]
is.na(data.full)
talbe(is.na(data.full))
table(is.na(data.full))
data.full.daily <- ddply(data.full, .(date), summarise,
mean.step = mean(steps),
median.step = median(steps))
with(data.per.day, plot(date, mean.step))
with(data.per.day, plot(date, mean.step, type = "l"))
line(data.full.daily, plot(date, mean.step, col = "red"))
head(data.full.daily)
with(data.full.daily, line(date, mean.step, col = "red"))
?line
?plot
dev.off()
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, line(date, mean.step, col = "red"))
with(data.full.daily, line(date, mean.step))
?line
?lines
with(data.full.daily, lines(date, mean.step))
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, lines(date, mean.step))
dev.off()
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, lines(date, mean.step))
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, lines(date, mean.step))
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
?mfrow
??mfrow
par(mfrow = c(2, 1))
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, lines(date, mean.step))
par(mfrow = c(2, 1))
dev.off()
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, plot(date, mean.step, type = "l", col = "blue"))
par(mfrow = c(2, 1))
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, plot(date, mean.step, type = "l", col = "blue"))
par(mfrow = c(1, 2))
with(data.per.day, plot(date, mean.step, type = "l", col = "red"))
with(data.full.daily, plot(date, mean.step, type = "l", col = "blue"))
```
